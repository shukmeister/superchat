Milestone 1: 1x1 Chat

1. Scaffold project structure and install dependencies (pyautogen)
2. Implement CLI entry-point (superchat / sc) with argparse stub
3. Build setup loop: display ASCII “SUPERCHAT” banner and session info panel
4. Write a function to separate commands (e.g., /model) from chat messages.
5. Store selected model(s) in an in-memory config 
6. Define per-agent background-prompt templates in code
7. Implement /start: initialize chat session for one model and enter chat loop. Chat UI has a >>>
8. In chat loop, read user input (text or /ask <agent>), call model API, render response
9. Implement /exit to end the session

Milestone 2: 1x N Debate

1. Create setup commands: /list, /model <slot> <name>, /remove <name>
2. Extend config to hold multiple model slots; add several more models
3. Prevent multiple of the same model from being selected
4. After /start with >1 models, broadcast prompt to all agents in sequence (After /start, allow sequential private chats with each model.)
5. Create logic for 1:1 chat commands: /promote, /restart, /boot
6. Upon /promote, append that agent’s transcript to a shared “debate context” buffer
7. After all slots processed, assemble debate:
   show original prompt once at top
   dump transcripts in slot order
   switch to round-robin multi-agent loop (in slot order)
8. In multi-agent loop: on each “turn” (user text or empty), loop through active agents, include full shared context + history, solicit reply
9. Honor /boot to remove agents mid-debate; support implicit empty-input turns

Milestone 3: CLI-Flag Shortcuts

1. Define CLI flags (--model/-m, --voice/-v, etc.) in argparse alongside subcommands
2. Map flags to the setup config (skip interactive setup when flags present)
3. Auto-invoke /start when minimal flags given (e.g. one model)
4. Ensure CLI parameters take priority over default settings
5. Validate flags (no duplicate models, unknown flags) and error out
6. Track and accumulate token counts, rounds, elapsed time; update on each turn; implement /stats
7. On /exit, print summary (tokens, costs) and terminate
8. /help command and update help text to include flag usage examples

(BELOW THE LINE/DO NOT IMPLEMENT):

Milestone 4: Voice

Milestone 5: Threaded Conversations

(?) P2: Threaded conversation system (replacing round robin) - Implement a system where each message has a unique ID and can reply to another via a reply_to field, forming threads. Models respond only to specific messages by ID or when invited by the user with commands like /open for general input, ensuring controlled and relevant model participation.